#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('quizl');
// Cargamos el modulo de ficheros para leer los ficheros de clave y certificado
var fs = require('fs');
// Cargamos el modulo https para conexiones seguras
var https = require('https');
// Desactivamos el protocolo http en el ultimo apartado del modulo 9
var http = require('http');

var options = {
    key: fs.readFileSync('certs/quizl-luis-key.pem').toString(),
    cert: fs.readFileSync('certs/quizl-luis-cert.pem').toString()
};

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.set('httpsPort', 8443);
app.enable('trust proxy');

var httpServer = http.createServer(app);
var httpsServer = https.createServer(options, app);

//server.on('request', app);
httpsServer.listen(app.get('httpsPort'), function () {
  console.log("Listening secure on " + httpsServer.address().address + ":" + httpsServer.address().port);
});

httpServer.listen(app.get('port'), function () {
  console.log("Listening insecure on " + httpServer.address().address + ":" + httpServer.address().port);
});
httpServer.on('error', onError);
httpServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
